variance_explained = np.sum(fitted[:, :3] ** 2, axis=1) / np.sum(fitted ** 2, axis=1)
index_max_variance = np.argsort(variance_explained)[-10:][::-1]
index_max_variance
#vector_max_variance = transformed_vectors[index_max_variance]

normalized_variance_explained = (fitted ** 2).T / np.sum(fitted ** 2, axis=1)
normalized_variance_explained = normalized_variance_explained.T

# Step 2: Define weights
weights = np.array([0.3, 0.3, 0.2] + [-0.01] * (fitted.shape[1] - 3))

# Step 3: Calculate scores for all vectors
scores = np.dot(normalized_variance_explained, weights)

# Step 4: Select the vector with the highest score
index_best_vector = np.argmax(scores)
best_vector = fitted[index_best_vector]

print("Best vector:", best_vector)
print("Score:", scores[index_best_vector])
#In this code, the weights are set to value the contributions from the first three components and slightly penalize contributions from all other components. You may need to adjust the weights and the score function to suit your specific needs and the characteristics of your data.




print(index_best_vector)
